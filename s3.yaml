AWSTemplateFormatVersion: 2010-09-09

Resources:

   MyBucket1:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: abonaser1997

   S3Bucket2:
     Type: AWS::S3::Bucket
     Properties:
       BucketName: abonaser1998

   S3BucketPolicy:
     Type: AWS::S3::BucketPolicy
     Properties:
       Bucket: !Ref MyBucket1
       PolicyDocument:
          Id: mypolicydoc
          Version: "2012-10-17"
          Statement:
            - Sid: "VisualEditor0"
              Action: ["s3:GetObject" ,"s3:DeleteObject" ]
              Effect: Allow
              Resource: !Join
                   - ''
                   - - 'arn:aws:s3:::'
                     - !Ref MyBucket1
                     - /*
              Principal:
                  AWS: !Join [ '', [ "arn:aws:iam::", 682322613156, ":role/", Ref : Role ] ]

            - Sid: "VisualEditor1"
              Action: "s3:ListBucket"
              Effect: Allow
              Resource: !Join
                   - ''
                   - - 'arn:aws:s3:::'
                     - !Ref MyBucket1
              Principal: 
                  AWS: !Join [ '', [ "arn:aws:iam::", 682322613156, ":role/", Ref : Role ] ]
 

   S3BucketPolicy2:
       Type: AWS::S3::BucketPolicy
       Properties:
        Bucket: !Ref S3Bucket2
        PolicyDocument:
          Id: mypolicydoc2
          Version: "2012-10-17"
          Statement:
            - Sid: "VisualEditor2"
              Action: "s3:PutObject" 
              Effect: Allow
              Resource: !Join
                   - ''
                   - - 'arn:aws:s3:::'
                     - !Ref S3Bucket2
                     - /*
              Principal:
                  AWS: !Join [ '', [ "arn:aws:iam::", 682322613156, ":role/", Ref : Role ] ]


   Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

   LambdaCloudFormation:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt  [ Role ,  Arn ]
      Code:
        ZipFile: |
            import boto3
            import json
            def lambda_handler(event, context):
              print('Hello from CloudFormation .. ')
